################### BUILD AND RUN THIS DOCKER FILE ############################

### BUILD IMAGE
# docker build -t rachelicr/env-pisca-v1:v3 -f .devcontainer/Dockerfile .

### USE IMAGE
# ctrl-sh-p in vscode and select the image

### PUSH IMAGE
# docker push rachelicr/env-pisca-v1

#################################################################################
# Image downloaded with advice from: # https://stackoverflow.com/questions/54437030/how-can-i-create-a-docker-image-to-run-both-python-and-r
###########################################################################
###################### THEN INSTALL PYTHON ################################
###########################################################################
FROM ubuntu:latest
#FROM r-base:4.3.2
ENV DEBIAN_FRONTEND=noninteractive
#RUN apt-get update && apt-get install -y --no-install-recommends build-essential r-base r-cran-randomforest python3.10 python3-pip python3-setuptools python3-dev
RUN apt-get update && apt-get install -y --no-install-recommends build-essential python3.10 python3-pip python3-setuptools python3-dev
#RUN pip3 install --upgrade pip
WORKDIR /app
ADD requirements.txt .
# installing python libraries
RUN pip3 install -r requirements.txt
COPY . /app
###########################################################################
###################### THEN INSTALL BEAST/PISCA ###########################
###########################################################################
# The pisca special additions needed
WORKDIR /project
COPY . /project
# Install software 
RUN apt-get update -y
RUN apt-get install -y openssh-client
RUN apt-get install -y wget
ENV JAVA_HOME=/project/jdk-20.0.2
ENV PATH=$JAVA_HOME/bin:$PATH
ENV PATH=/project/BEASTv1.8.4/bin:$PATH
# install the correct version of java!!!!!
#RUN wget -O jdk.tar.gz https://download.oracle.com/java/20/latest/jdk-20_linux-x64_bin.tar.gz
# it looks like that version has been moved to the archive between 10/10/23 and 17/10/23
RUN wget -O jdk.tar.gz https://download.oracle.com/java/20/archive/jdk-20.0.2_linux-x64_bin.tar.gz
RUN tar zxvf jdk.tar.gz
## makes directory jdk-20.0.2
# Install beast
RUN wget -O beast.tgz https://github.com/beast-dev/beast-mcmc/releases/download/v1.8.4/BEASTv1.8.4.tgz
RUN tar -xvzf beast.tgz
## makes directory BEASTv1.8.4
# Install pisca
RUN wget -O pisca.tgz https://github.com/adamallo/PISCA/releases/download/v1.1/PISCAv1.1.tgz
RUN tar -xvzf pisca.tgz

RUN apt-get install -y gdebi-core
RUN wget -O r-4.3.2_1_amd64.deb https://cdn.rstudio.com/r/ubuntu-2204/pkgs/r-4.3.2_1_amd64.deb
RUN gdebi -n r-4.3.2_1_amd64.deb
## makes directory PISCAv1.1 ## note that cd has to be inline with other commands
RUN chmod +x /project/PISCAv1.1/install.sh
RUN cd /project/PISCAv1.1/ && ./install.sh /project/BEASTv1.8.4/
# make a dir for the tmp files
RUN mkdir /project/xml

###########################################################################
###################### INSTALL R ################################
###########################################################################

#RUN apt-get update && apt-get -y install --no-install-recommends --no-install-suggests \
#        ca-certificates software-properties-common gnupg2 gnupg1 \
#        && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 \
#        && add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/' \
#        && apt-get install r-base

#RUN ln -s /opt/R/4.3.2/bin/R /usr/local/bin/R
#RUN ln -s /opt/R/4.3.2/bin/Rscript /usr/local/bin/Rscript
#ENV PATH=/opt/R/4.3.2/bin:$PATH
ENV PATH=/usr/local/bin:$PATH

# install required R libraries
#RUN Rscript requirements.r


#RUN /opt/R/${R_VERSION}/bin/R -e "install.packages('ape',dependencies=TRUE, repos='http://cran.rstudio.com/')"
#RUN /opt/R/${R_VERSION}/bin/R -e "install.packages('jsonlite',dependencies=TRUE, repos='http://cran.rstudio.com/')"
#RUN /opt/R/${R_VERSION}/bin/R -e "install.packages('data.table',dependencies=TRUE, repos='http://cran.rstudio.com/')"
#RUN /opt/R/${R_VERSION}/bin/R -e "install.packages('ggplot2',dependencies=TRUE, repos='http://cran.rstudio.com/')"
#RUN /opt/R/${R_VERSION}/bin/R -e "install.packages('cowplot',dependencies=TRUE, repos='http://cran.rstudio.com/')"
#RUN /opt/R/${R_VERSION}/bin/R -e "install.packages('HDInterval',dependencies=TRUE, repos='http://cran.rstudio.com/')"
#RUN /opt/R/${R_VERSION}/bin/R -e "install.packages('lubridate',dependencies=TRUE, repos='http://cran.rstudio.com/')"
# And from BIOCMANAGER
#RUN /opt/R/${R_VERSION}/bin/R -e "install.packages('BiocManager',dependencies=TRUE, repos='http://cran.rstudio.com/')"
#RUN /opt/R/${R_VERSION}/bin/R -e "BiocManager::install('treeio')"
#RUN /opt/R/${R_VERSION}/bin/R -e "BiocManager::install('ggtree')"